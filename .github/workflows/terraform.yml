name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.9.0'
  TF_DIRECTORY: './terraform'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: Terraform
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Debug Variables
      run: |
        echo "PROJECT_ID: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}"
        echo "PROJECT_NUMBER: ${{ vars.GOOGLE_CLOUD_PROJECT_NUMBER }}"
        echo "POOL: ${{ vars.WORKLOAD_IDENTITY_POOL }}"
        echo "PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"

    - name: Authenticate to Google Cloud (Direct Workload Identity Federation)
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/${{ vars.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        project_id: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create terraform.tfvars
      run: |
        cat > terraform.tfvars << EOF
        project_id = "${{ vars.GOOGLE_CLOUD_PROJECT_ID }}"
        region = "asia-northeast1"
        app_name = "elevia"
        db_user = "${{ secrets.DB_USER }}"
        db_password = "${{ secrets.DB_PASS }}"
        db_name = "${{ secrets.DB_NAME }}"
        nextauth_secret = "${{ secrets.NEXTAUTH_SECRET }}"
        custom_domain = ""
        deletion_protection = true
        max_instances = 10
        db_tier = "db-f1-micro"
        EOF

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.GOOGLE_CLOUD_PROJECT_ID }}-terraform-state" \
          -backend-config="prefix=terraform/state"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: outputs
      run: |
        echo "cloud_run_url=$(terraform output -raw cloud_run_url)" >> $GITHUB_OUTPUT
        echo "cloud_sql_connection_name=$(terraform output -raw cloud_sql_connection_name)" >> $GITHUB_OUTPUT
        echo "artifact_registry_repository=$(terraform output -raw artifact_registry_repository)" >> $GITHUB_OUTPUT

    - name: Summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## 🎉 Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Cloud Run URL**: ${{ steps.outputs.outputs.cloud_run_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cloud SQL Connection**: ${{ steps.outputs.outputs.cloud_sql_connection_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Registry**: ${{ steps.outputs.outputs.artifact_registry_repository }}" >> $GITHUB_STEP_SUMMARY
name: 'Terraform Infrastructure'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'

env:
  TF_VERSION: '1.9.0'
  TF_DIRECTORY: './terraform'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    environment: Terraform
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_DIRECTORY }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Debug Variables
      run: |
        echo "PROJECT_ID: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}"
        echo "PROJECT_NUMBER: ${{ vars.GOOGLE_CLOUD_PROJECT_NUMBER }}"
        echo "POOL: ${{ vars.WORKLOAD_IDENTITY_POOL }}"
        echo "PROVIDER: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}"

    - name: Authenticate to Google Cloud (Direct Workload Identity Federation)
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/${{ vars.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
        project_id: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create terraform.tfvars
      run: |
        {
          echo "project_id = \"${{ vars.GOOGLE_CLOUD_PROJECT_ID }}\""
          echo "region = \"asia-northeast1\""
          echo "app_name = \"elevia\""
          echo "db_user = \"${{ secrets.DB_USER }}\""
          echo "db_password = \"${{ secrets.DB_PASS }}\""
          echo "db_name = \"${{ secrets.DB_NAME }}\""
          echo "nextauth_secret = \"${{ secrets.AUTH_SECRET }}\""
          echo "google_oauth_client_id = \"${{ secrets.AUTH_GOOGLE_ID }}\""
          echo "google_oauth_client_secret = \"${{ secrets.AUTH_GOOGLE_SECRET }}\""
          echo "custom_domain = \"\""
          echo "deletion_protection = true"
          echo "max_instances = 10"
          echo "db_tier = \"db-f1-micro\""
        } > terraform.tfvars
        
        # Format the generated terraform.tfvars file
        terraform fmt terraform.tfvars

    - name: Debug terraform.tfvars
      run: |
        echo "=== terraform.tfvars content ==="
        cat terraform.tfvars
        echo "=== end of file ==="
        echo "=== file with line numbers ==="
        cat -n terraform.tfvars
        echo "=== hexdump of file ==="
        hexdump -C terraform.tfvars

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        terraform init \
          -backend-config="bucket=${{ vars.GOOGLE_CLOUD_PROJECT_ID }}-terraform-state" \
          -backend-config="prefix=terraform/state"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: outputs
      run: |
        echo "cloud_sql_connection_name=$(terraform output -raw cloud_sql_connection_name)" >> $GITHUB_OUTPUT
        echo "artifact_registry_repository=$(terraform output -raw artifact_registry_repository)" >> $GITHUB_OUTPUT
        echo "vpc_connector_name=$(terraform output -raw vpc_connector_name)" >> $GITHUB_OUTPUT

    - name: Summary
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "## üéâ Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "- **Cloud SQL Connection**: ${{ steps.outputs.outputs.cloud_sql_connection_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Registry**: ${{ steps.outputs.outputs.artifact_registry_repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **VPC Connector**: ${{ steps.outputs.outputs.vpc_connector_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Note: Cloud Run service is managed by the deployment workflow" >> $GITHUB_STEP_SUMMARY
name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}
  REGION: asia-northeast1
  SERVICE_NAME: elevia

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (Direct Workload Identity Federation)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/${{ vars.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ vars.WORKLOAD_IDENTITY_POOL }}/providers/${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.GOOGLE_CLOUD_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.9.0'

      - name: Configure Docker to use gcloud as credential helper
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Wait for Artifact Registry readiness
        id: artifact-registry-check
        run: |
          echo "Checking if Artifact Registry repository exists..."
          for i in {1..10}; do
            if gcloud artifacts repositories describe elevia-repo --location=${{ env.REGION }} 2>/dev/null; then
              echo "✅ Artifact Registry repository is ready"
              echo "ready=true" >> $GITHUB_OUTPUT
              break
            else
              echo "⏳ Waiting for Artifact Registry... (attempt $i/10)"
              if [ $i -eq 10 ]; then
                echo "❌ Artifact Registry repository not found after 10 attempts"
                echo "ready=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Get repository information
        id: repo-info
        run: |
          # Get Artifact Registry repository from Terraform outputs
          REPO_URL="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/elevia-repo"
          echo "repository_url=$REPO_URL" >> $GITHUB_OUTPUT
          echo "image_tag=$REPO_URL/${{ env.SERVICE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "latest_tag=$REPO_URL/${{ env.SERVICE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build \
            --tag ${{ steps.repo-info.outputs.image_tag }} \
            --tag ${{ steps.repo-info.outputs.latest_tag }} \
            .

      - name: Push Docker image
        run: |
          docker push ${{ steps.repo-info.outputs.image_tag }}
          docker push ${{ steps.repo-info.outputs.latest_tag }}

      - name: Get Terraform outputs for deployment
        id: tf-outputs
        run: |
          # Get Cloud SQL connection name from Terraform state
          cd terraform
          terraform init \
            -backend-config="bucket=${{ vars.GOOGLE_CLOUD_PROJECT_ID }}-terraform-state" \
            -backend-config="prefix=terraform/state"
          
          # Check if Cloud SQL output exists (infrastructure may not be deployed yet)
          if terraform output cloud_sql_connection_name >/dev/null 2>&1; then
            CLOUD_SQL_CONNECTION=$(terraform output -raw cloud_sql_connection_name)
            CLOUD_SQL_PRIVATE_IP=$(terraform output -raw cloud_sql_private_ip)
            echo "cloud_sql_connection=$CLOUD_SQL_CONNECTION" >> $GITHUB_OUTPUT
            echo "cloud_sql_private_ip=$CLOUD_SQL_PRIVATE_IP" >> $GITHUB_OUTPUT
            echo "infrastructure_ready=true" >> $GITHUB_OUTPUT
          else
            echo "infrastructure_ready=false" >> $GITHUB_OUTPUT
            echo "⚠️ Cloud SQL not deployed yet. Deploying without database connection."
          fi

      - name: Deploy to Cloud Run (Initial)
        run: |
          # Use Terraform-created service account if infrastructure is ready
          if [ "${{ steps.tf-outputs.outputs.infrastructure_ready }}" = "true" ]; then
            echo "Deploying with full configuration..."
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ steps.repo-info.outputs.latest_tag }} \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --service-account=elevia-run-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
              --set-env-vars="NODE_ENV=production" \
              --set-env-vars="CLOUD_SQL_CONNECTION_NAME=${{ steps.tf-outputs.outputs.cloud_sql_connection }}" \
              --set-env-vars="DB_NAME=elevia_db" \
              --set-env-vars="DB_USER=elevia_user" \
              --set-env-vars="DB_HOST=${{ steps.tf-outputs.outputs.cloud_sql_private_ip }}" \
              --set-env-vars="GOOGLE_VERTEX_PROJECT=${{ env.PROJECT_ID }}" \
              --set-env-vars="GOOGLE_VERTEX_LOCATION=us-central1" \
              --set-secrets="DB_PASS=elevia-db-password:latest" \
              --set-secrets="AUTH_SECRET=elevia-nextauth-secret:latest" \
              --set-secrets="AUTH_GOOGLE_ID=elevia-google-oauth-client-id:latest" \
              --set-secrets="AUTH_GOOGLE_SECRET=elevia-google-oauth-client-secret:latest" \
              --vpc-connector=elevia-connector-v2 \
              --vpc-egress=private-ranges-only \
              --timeout=300 \
              --memory=1Gi \
              --cpu=1 \
              --max-instances=10 \
              --quiet
          else
            echo "Deploying without custom service account (infrastructure not ready)..."
            gcloud run deploy ${{ env.SERVICE_NAME }} \
              --image=${{ steps.repo-info.outputs.latest_tag }} \
              --region=${{ env.REGION }} \
              --platform=managed \
              --allow-unauthenticated \
              --quiet
          fi

      - name: Get Cloud Run URL
        id: deploy-url
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --format='value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::notice title=Deployment Complete::Application deployed to $URL"

      - name: Update AUTH_URL
        if: steps.tf-outputs.outputs.infrastructure_ready == 'true'
        run: |
          echo "Setting AUTH_URL to ${{ steps.deploy-url.outputs.url }}"
          gcloud run services update ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --update-env-vars="AUTH_URL=${{ steps.deploy-url.outputs.url }}" \
            --quiet


      - name: Run database migrations
        if: steps.tf-outputs.outputs.infrastructure_ready == 'true'
        run: |
          # Install pnpm and dependencies
          corepack enable pnpm
          corepack prepare pnpm@10.12.4 --activate
          pnpm install --frozen-lockfile
          
          # Set environment variables for migration
          export CLOUD_SQL_CONNECTION_NAME="${{ steps.tf-outputs.outputs.cloud_sql_connection }}"
          export DB_USER="${{ secrets.DB_USER }}"
          export DB_PASS="${{ secrets.DB_PASS }}"
          export DB_NAME="${{ secrets.DB_NAME }}"
          
          # Run database schema push (more reliable than migrate for initial setup)
          pnpm run db:push
        continue-on-error: false

      - name: Infrastructure Setup Notice
        if: steps.tf-outputs.outputs.infrastructure_ready == 'false'
        run: |
          echo "::notice title=Infrastructure Setup Required::Cloud SQL not deployed yet. Please run Terraform deployment first."
          echo "::notice title=Next Steps::1. Deploy infrastructure: terraform apply in terraform/ directory"
          echo "::notice title=Next Steps::2. Re-run this deployment workflow after infrastructure is ready"

      - name: Add deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service**: ${{ env.SERVICE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ steps.repo-info.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.deploy-url.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY

